## This is just the *preliminary* part of the general 'cross-makefile'.
## It's designed for different OS (linux,darwin)

## Expected:
##   OS : linux, darwin
##   ARCH: x32 x64

TARGET:=$(OS)-$(ARCH)

## Set several macro depending on OS, ARCH ...
##  PATH_SEP:  character used in PATH (or CLASSPATH) to separate paths
##  DLL     :  the full name of the final shared library

ifeq ($(OS), linux)
PATH_SEP=:
DLL=serif.so

else ifeq ($(OS), darwin)
PATH_SEP=:
DLL=serif.dylib

else
$(error ERROR: Unrecognized OS "$(OS)" )

endif


ifeq ($(ARCH), x32)
CC_TARGET=-m32

else ifeq ($(ARCH), x64)
CC_TARGET=-m64

else
$(error ERROR: Unrecognized ARCH "$(ARCH)" )
endif

ifndef BUILDDIR
BUILDDIR=XBUILD
endif



CC=gcc $(CC_TARGET)

## Options for CC :
 ##   -O3 - (optional) - maximum optimizations
 ##  -fPIC ...  ??
override CFLAGS += -O3 -fPIC

## set some macros for OS-Dependent commands.
## -- Macros for Unix commands -------------- 

X_COMMENT=\#
X_RMDIR=rm -rf
X_MKDIR=mkdir -p
X_COPY=cp
X_RM=rm
ifeq ($(OS), win)
X_COPYTREE=cp --verbose -uRf -T
else ifeq ($(OS), linux)
X_COPYTREE=cp --verbose -uRf -T
else ifeq ($(OS), darwin)
X_COPYTREE=cp -v -Rf
endif

  
#
# pattern Rule: from *.c to *.obj :
#
.SUFFIXES : .c 

DIR_CSRC=src
DIR_OBJ=$(BUILDDIR)/$(TARGET)

# NOTE: some parts (CC_INCLUDE, ..) will be defined later in cross-makefile
$(DIR_OBJ)/%.obj :  $(DIR_CSRC)/%.c
	$(CC) -c $(CFLAGS) -DUSE_TCL_STUBS  -I BuildSupport/tcl/include $< -o $@ 



## Commands and options for linking

ifeq ($(OS), linux)
LINK=$(CC) -shared -Wl,--no-undefined
LIBS_OPTIONS=\
	-LBuildSupport/tcl/$(TARGET)  -ltclstub8.6 \
	-lfontconfig

else ifeq ($(OS), darwin)
LINK=$(CC) -shared
LIBS_OPTIONS=\
	-LBuildSupport/tcl/$(TARGET)  -ltclstub8.6 \
	-framework CoreFoundation \
	-framework CoreText

else
$(error ERROR: Unrecognized OS "$(OS)" )

endif

LINK_OUT_OPTION=-o 

include cross-makefile

